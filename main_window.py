import sys
import os
import sqlite3
import pandas as pd
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QLabel, QPushButton,
    QTabWidget, QWidget, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QMessageBox, QCheckBox, QComboBox, QLineEdit, QCalendarWidget, QDialog,
    QFormLayout, QColorDialog, QHeaderView, QFileDialog
)
from PyQt6.QtCore import Qt, QDate, QDateTime
from PyQt6.QtGui import QColor
from admin_window import AdminWindow


class MainWindow(QMainWindow):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.
    """
    def __init__(self, user_info):
        super().__init__()
        self.user_info = user_info
        self.file_path = None
        self.setWindowTitle("–°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        self.setGeometry(300, 150, 800, 600)

        self.init_ui()

    def init_ui(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        """
        main_widget = QWidget()
        main_layout = QVBoxLayout()

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.create_top_panel(main_layout)

        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.init_tabs()
        main_layout.addWidget(self.tabs)

        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)

    def create_top_panel(self, layout):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞.
        """
        top_panel = QHBoxLayout()

        # –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_label = QLabel(
            f'{self.user_info["last_name"]} {self.user_info["first_name"][0]}.{self.user_info["middle_name"][0]}.'
        )
        user_label.setStyleSheet("font-size: 14pt;")
        user_label.setAlignment(Qt.AlignmentFlag.AlignLeft)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        logout_button = QPushButton("–í—ã—Ö–æ–¥")
        logout_button.clicked.connect(self.logout)

        # –õ–µ–π–∞—É—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ø—Ä–∞–≤–∞)
        right_panel = QHBoxLayout()
        right_panel.addWidget(logout_button)
        right_panel.setAlignment(Qt.AlignmentFlag.AlignRight)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
        top_panel.addWidget(user_label, alignment=Qt.AlignmentFlag.AlignLeft)
        top_panel.addLayout(right_panel)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addLayout(top_panel)

    def init_tabs(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ–∏—Å–∫"
        search_tab = QWidget()
        search_layout = QVBoxLayout()

        self.init_search_filters(search_layout)

        self.search_results_table = QTableWidget()
        self.search_results_table.setColumnCount(5)
        self.search_results_table.setColumnCount(6)
        self.search_results_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¢–∏–ø", "–ê–≤—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å", "–§–∞–π–ª"])
        self.search_results_table.horizontalHeader().setStretchLastSection(True)
        search_layout.addWidget(self.search_results_table)

        search_tab.setLayout(search_layout)
        self.tabs.addTab(search_tab, "–ü–æ–∏—Å–∫")

        # –í–∫–ª–∞–¥–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        registration_tab = QWidget()
        registration_layout = QVBoxLayout()
        self.init_registration_form(registration_layout)
        registration_tab.setLayout(registration_layout)
        self.tabs.addTab(registration_tab, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

        # –í–∫–ª–∞–¥–∫–∞ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
        calendar_tab = QWidget()
        calendar_layout = QVBoxLayout()

        self.calendar = QCalendarWidget()
        self.calendar.clicked.connect(self.show_events_on_date)
        calendar_layout.addWidget(self.calendar)

        create_event_button = QPushButton("–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
        create_event_button.clicked.connect(self.create_event)
        calendar_layout.addWidget(create_event_button)

        calendar_tab.setLayout(calendar_layout)
        self.tabs.addTab(calendar_tab, "–ö–∞–ª–µ–Ω–¥–∞—Ä—å")

        # –í–∫–ª–∞–¥–∫–∞ "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if self.user_info["role"] == "admin":
            self.init_action_history_tab()

            # –í–∫–ª–∞–¥–∫–∞ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_tab = AdminWindow()
            self.tabs.addTab(admin_tab, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")

    def init_search_filters(self, layout):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        """
        filters_layout = QVBoxLayout()

        self.my_documents_checkbox = QCheckBox("–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        filters_layout.addWidget(self.my_documents_checkbox)

        self.search_status_combobox = QComboBox()
        self.search_status_combobox.addItem("–í—Å–µ")
        self.populate_status_combobox(self.search_status_combobox)

        self.search_type_combobox = QComboBox()
        self.search_type_combobox.addItems(["–í—Å–µ", "–û—Ç—á—ë—Ç", "–ü–æ—Ä—É—á–µ–Ω–∏–µ", "–†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ", "–ó–∞—è–≤–ª–µ–Ω–∏–µ"])

        filters_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞:"))
        filters_layout.addWidget(self.search_status_combobox)

        filters_layout.addWidget(QLabel("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:"))
        filters_layout.addWidget(self.search_type_combobox)

        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        filters_layout.addWidget(self.search_input)

        search_button = QPushButton("üîç –ò—Å–∫–∞—Ç—å")
        search_button.clicked.connect(self.perform_search)
        filters_layout.addWidget(search_button)

        layout.addLayout(filters_layout)

    def perform_search(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
        """
        conn = sqlite3.connect("document_management_system.db")
        cursor = conn.cursor()

        query = """
        SELECT Document.Id, Document.Name, Document.Type, 
               Users.LastName || ' ' || Users.FirstName, Status.Name, Document.Name 
        FROM Document
        JOIN Users ON Document.Author = Users.Id
        JOIN Status ON Document.Status = Status.Id WHERE 1=1
        """

        if self.my_documents_checkbox.isChecked():
            query += f"AND Users.Id = {self.user_info['id']} "

        if self.search_status_combobox.currentText() != "–í—Å–µ":
            query += f"AND Status.Name = '{self.search_status_combobox.currentText()}' "

        if self.search_type_combobox.currentText() != "–í—Å–µ":
            query += f"AND Document.Type = '{self.search_type_combobox.currentText()}' "

        if self.search_input.text():
            query += f"AND (Document.Id = ? OR Document.Name LIKE ?) "
            cursor.execute(query, (self.search_input.text(), f"%{self.search_input.text()}%"))
        else:
            cursor.execute(query)

        results = cursor.fetchall()
        self.search_results_table.setRowCount(len(results))
        self.search_results_table.setColumnCount(7)
        self.search_results_table.setHorizontalHeaderLabels(
            ["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¢–∏–ø", "–ê–≤—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å", "–°–∫–∞—á–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å"])

        for row_idx, row_data in enumerate(results):
            for col_idx, col_data in enumerate(row_data[:-1]):
                self.search_results_table.setItem(row_idx, col_idx, QTableWidgetItem(str(col_data)))

            download_button = QPushButton("–°–∫–∞—á–∞—Ç—å")
            download_button.clicked.connect(lambda _, doc_id=row_data[0]: self.download_file(doc_id))
            self.search_results_table.setCellWidget(row_idx, 5, download_button)

            delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
            delete_button.clicked.connect(lambda _, doc_id=row_data[0]: self.delete_file(doc_id))
            self.search_results_table.setCellWidget(row_idx, 6, delete_button)

        conn.close()

        self.log_action(
            "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            self.search_input.text(),
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '{self.search_input.text()}'.",
            document_id=None
        )

    def download_file(self, doc_id):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID
        """
        try:
            conn = sqlite3.connect("document_management_system.db")
            cursor = conn.cursor()

            cursor.execute("SELECT Name, Content, FileType FROM Document WHERE Id = ?", (doc_id,))
            result = cursor.fetchone()

            if result:
                file_name, file_content, file_extension = result

                file_name_with_extension = file_name + file_extension

                file_path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª", file_name_with_extension,
                                                           "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)")

                if file_path:
                    with open(file_path, "wb") as file:
                        file.write(file_content)
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª {file_name_with_extension} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

                    self.log_action(
                        "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                        file_name,
                        f"–î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –±—ã–ª —Å–∫–∞—á–∞–Ω.",
                        document_id=doc_id
                    )
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            conn.close()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")

    def delete_file(self, doc_id):
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect("document_management_system.db")
            cursor = conn.cursor()
            cursor.execute("SELECT Name FROM Document WHERE Id = ?", (doc_id,))
            result = cursor.fetchone()
            conn.close()

            if result is None:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–î–æ–∫—É–º–µ–Ω—Ç —Å ID {doc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            file_name = result[0]  # –ò–º—è —Ñ–∞–π–ª–∞

            confirmation = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_name} —Å ID {doc_id}?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if confirmation != QMessageBox.StandardButton.Yes:
                return

            conn = sqlite3.connect("document_management_system.db")
            cursor = conn.cursor()
            cursor.execute("DELETE FROM Document WHERE Id = ?", (doc_id,))
            conn.commit()
            conn.close()

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

            self.log_action(
                "–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                file_name,
                f"–î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –±—ã–ª —É–¥–∞–ª—ë–Ω.",
                document_id=doc_id
            )

            self.perform_search()
        except sqlite3.Error as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def init_registration_form(self, layout):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        """
        form_layout = QFormLayout()

        # –ü–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.document_name_input = QLineEdit()
        self.document_name_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", self.document_name_input)

        # –ò–º—è –∞–≤—Ç–æ—Ä–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        author_label = QLabel(
            f'{self.user_info["last_name"]} {self.user_info["first_name"][0]}.{self.user_info["middle_name"][0]}.'
        )
        form_layout.addRow("–ê–≤—Ç–æ—Ä:", author_label)

        # –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        self.upload_date_label = QLabel(QDateTime.currentDateTime().toString("yyyy-MM-dd"))
        form_layout.addRow("–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", self.upload_date_label)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.registration_status_combobox = QComboBox()
        self.populate_status_combobox(self.registration_status_combobox)
        form_layout.addRow("–°—Ç–∞—Ç—É—Å:", self.registration_status_combobox)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.type_combobox = QComboBox()
        self.type_combobox.addItems(["–û—Ç—á—ë—Ç", "–ü–æ—Ä—É—á–µ–Ω–∏–µ", "–†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ", "–ó–∞—è–≤–ª–µ–Ω–∏–µ"])
        form_layout.addRow("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", self.type_combobox)

        # –ü–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        self.file_upload_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
        self.file_upload_button.clicked.connect(self.upload_file)
        self.file_path_label = QLabel("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        file_layout = QHBoxLayout()
        file_layout.addWidget(self.file_upload_button)
        file_layout.addWidget(self.file_path_label)
        form_layout.addRow("–§–∞–π–ª:", file_layout)

        layout.addLayout(form_layout)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
        save_button.clicked.connect(self.save_document)
        layout.addWidget(save_button)

    def upload_file(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞", "", "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)")
        if file_path:
            self.file_path_label.setText(file_path)
            self.file_path = file_path

    def save_document(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        """
        if not self.document_name_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        if not self.file_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
            return

        try:
            file_name, file_extension = os.path.splitext(self.file_path)
            file_extension = file_extension.lower()

            with open(self.file_path, "rb") as file:
                file_data = file.read()

            conn = sqlite3.connect("document_management_system.db")
            cursor = conn.cursor()
            cursor.execute(
                """
                INSERT INTO Document (Name, Type, Author, CreationDate, Content, Status, Version, FileType)
                VALUES (?, ?, ?, DATE('now'), ?, (SELECT Id FROM Status WHERE Name = ?), 1, ?)
                """,
                (
                    self.document_name_input.text(),
                    self.type_combobox.currentText(),
                    self.user_info["id"],
                    file_data,
                    self.registration_status_combobox.currentText(),
                    file_extension
                )
            )
            conn.commit()
            conn.close()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

            self.log_action(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                self.document_name_input.text(),
                f"–î–æ–∫—É–º–µ–Ω—Ç '{self.document_name_input.text()}' –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                document_id=cursor.lastrowid
            )

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

    def populate_status_combobox(self, combobox):
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.
        """
        try:
            conn = sqlite3.connect("document_management_system.db")
            cursor = conn.cursor()
            cursor.execute("SELECT Name FROM Status")
            statuses = cursor.fetchall()
            combobox.addItems([status[0] for status in statuses])
        except sqlite3.Error as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            conn.close()

    def show_events_on_date(self, date: QDate):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π.
        """
        selected_date = date.toString('yyyy-MM-dd')

        events = self.get_events_for_date(selected_date)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        events_dialog = EventsDialog(events, selected_date, show_create_button=False)
        events_dialog.exec()

    def get_events_for_date(self, date: str):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ.
        """
        conn = sqlite3.connect("document_management_system.db")
        cursor = conn.cursor()

        try:
            cursor.execute(
                "SELECT Title, Description, StartTime, EndTime, Color FROM CalendarEvent WHERE EventDate = ?", (date,))
            events = cursor.fetchall()
        except sqlite3.Error as e:
            print(f"Database error: {e}")
            events = []
        finally:
            conn.close()

        return events

    def create_event(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.
        """
        event_creation_dialog = EventCreationDialog(self.user_info['id'])
        event_creation_dialog.exec()

        self.log_action(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
            "–°–æ–±—ã—Ç–∏–µ",
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ.",
            document_id=None
        )

    def load_action_history(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ.
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect("document_management_system.db")
            cursor = conn.cursor()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Action
            cursor.execute('''
                SELECT 
                    Action.Type, 
                    Action.Object, 
                    Action.DateTime, 
                    Users.LastName || ' ' || Users.FirstName
                FROM Action
                JOIN Users ON Action.Users = Users.Id
                ORDER BY Action.DateTime DESC
            ''')
            actions = cursor.fetchall()

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            self.history_table.setRowCount(0)

            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, —Ç–∞–±–ª–∏—Ü–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π
            if not actions:
                return  # –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –º–µ—Ç–æ–¥, –Ω–µ –≤—ã–≤–æ–¥—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
            self.history_table.setRowCount(len(actions))
            for row_idx, action in enumerate(actions):
                for col_idx, col_data in enumerate(action):
                    self.history_table.setItem(row_idx, col_idx, QTableWidgetItem(str(col_data)))

        except sqlite3.Error as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π: {e}")
        finally:
            conn.close()

    def log_action(self, action_type, object_name, description="", document_id=None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        """
        try:
            conn = sqlite3.connect("document_management_system.db")
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO Action (Type, Object, DateTime, Users, Document, Description)
                VALUES (?, ?, datetime('now'), ?, ?, ?)
            ''', (action_type, object_name, self.user_info['id'], document_id, description))
            conn.commit()
        except sqlite3.Error as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: {e}")
        finally:
            conn.close()

    def init_action_history_tab(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π.
        """
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –∏ layout –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        history_tab = QWidget()
        history_layout = QVBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_button = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        export_button.clicked.connect(self.export_action_history_to_excel)
        history_layout.addWidget(export_button)

        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_layout = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        update_button.clicked.connect(self.load_action_history)
        buttons_layout.addWidget(update_button)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_button = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        clear_button.clicked.connect(self.clear_action_history)
        buttons_layout.addWidget(clear_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        history_layout.addLayout(buttons_layout)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(4)
        self.history_table.setHorizontalHeaderLabels(["–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è", "–û–±—ä–µ–∫—Ç", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"])
        self.history_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.history_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ layout
        history_layout.addWidget(self.history_table)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        history_tab.setLayout(history_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.tabs.addTab(history_tab, "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        self.load_action_history()

    def export_action_history_to_excel(self):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ñ–∞–π–ª Excel.
        """
        try:
            conn = sqlite3.connect("document_management_system.db")
            cursor = conn.cursor()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Action
            cursor.execute('''
                SELECT 
                    Action.Type AS "–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è", 
                    Action.Object AS "–û–±—ä–µ–∫—Ç", 
                    Action.DateTime AS "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", 
                    Users.LastName || ' ' || Users.FirstName AS "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                FROM Action
                JOIN Users ON Action.Users = Users.Id
                ORDER BY Action.DateTime DESC
            ''')
            actions = cursor.fetchall()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            if not actions:
                QMessageBox.warning(self, "–≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω", "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç–∞. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                return

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
            headers = [description[0] for description in cursor.description]

            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            df = pd.DataFrame(actions, columns=headers)

            # –î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏ –∏ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª",
                "–ò—Å—Ç–æ—Ä–∏—è_–¥–µ–π—Å—Ç–≤–∏–π.xlsx",
                "Excel Files (*.xlsx)"
            )

            if file_path:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                df.to_excel(file_path, index=False)
                QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω",
                                        f"–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª:\n{file_path}")

            self.log_action(
                "–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏",
                "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π",
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ñ–∞–π–ª '{file_path}'.",
                document_id=None
            )

            conn.close()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π: {e}")

    def clear_action_history(self):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π.
        """
        confirmation = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if confirmation == QMessageBox.StandardButton.Yes:
            try:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect("document_management_system.db")
                cursor = conn.cursor()

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Action
                cursor.execute("DELETE FROM Action")
                conn.commit()
                conn.close()

                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.history_table.setRowCount(0)

                # –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏
                self.log_action(
                    "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏",
                    "",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—á–∏—Å—Ç–∏–ª –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π.",
                    document_id=None
                )

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
            except sqlite3.Error as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π: {e}")

    def logout(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
        """
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if reply == QMessageBox.StandardButton.Yes:
            self.close()

class BaseEventDialog(QDialog):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.
    """
    def __init__(self, user_id=None, events=None, selected_date=None, show_create_button=True):
        super().__init__()
        self.user_id = user_id
        self.events = events
        self.selected_date = selected_date
        self.show_create_button = show_create_button
        self.selected_color = '#FFFFFF'

    def select_color(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞.
        """
        color = QColorDialog.getColor()
        if color.isValid():
            self.selected_color = color.name()

    def create_event(self, title_input, description_input, date_input, start_time_input, end_time_input):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        title = title_input.text()
        description = description_input.text()
        date = date_input.text()
        start_time = start_time_input.text()
        end_time = end_time_input.text()

        conn = sqlite3.connect("document_management_system.db")
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO CalendarEvent (Title, Description, EventDate, StartTime, EndTime, CreatedBy, Color)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (title, description, date, start_time, end_time, self.user_id, self.selected_color))

        conn.commit()
        conn.close()

        self.accept()


class EventCreationDialog(BaseEventDialog):
    """
    –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.
    """
    def __init__(self, user_id):
        super().__init__(user_id=user_id)

        self.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
        self.setGeometry(400, 200, 400, 300)

        self.layout = QFormLayout()

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.title_input = QLineEdit()
        self.description_input = QLineEdit()
        self.date_input = QLineEdit()
        self.start_time_input = QLineEdit()
        self.end_time_input = QLineEdit()

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        self.color_picker_button = QPushButton("–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç")
        self.color_picker_button.clicked.connect(self.select_color)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Ñ–æ—Ä–º—É
        self.layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", self.title_input)
        self.layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", self.description_input)
        self.layout.addRow("–î–∞—Ç–∞ (yyyy-mm-dd):", self.date_input)
        self.layout.addRow("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (hh:mm):", self.start_time_input)
        self.layout.addRow("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (hh:mm):", self.end_time_input)
        self.layout.addRow("", self.color_picker_button)

        self.create_button = QPushButton("–°–æ–∑–¥–∞—Ç—å")
        self.create_button.clicked.connect(lambda: self.create_event(self.title_input, self.description_input,
                                                                     self.date_input, self.start_time_input, self.end_time_input))
        self.layout.addRow("", self.create_button)

        self.setLayout(self.layout)


class EventsDialog(BaseEventDialog):
    """
    –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    """
    def __init__(self, events, selected_date, show_create_button=True):
        super().__init__(events=events, selected_date=selected_date, show_create_button=show_create_button)

        self.setWindowTitle(f"–°–æ–±—ã—Ç–∏—è –Ω–∞ {selected_date}")
        self.setGeometry(400, 200, 600, 400)

        self.layout = QVBoxLayout()

        self.events_table = QTableWidget()
        self.events_table.setColumnCount(4)
        self.events_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"])

        self.events_table.setRowCount(len(events))
        for row_idx, event in enumerate(events):
            row_color = event[4]
            for col_idx, col_data in enumerate(event[:-1]):
                item = QTableWidgetItem(str(col_data))
                self.events_table.setItem(row_idx, col_idx, item)

            for col_idx in range(4):
                self.events_table.item(row_idx, col_idx).setBackground(QColor(row_color))

        self.events_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.events_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)

        self.layout.addWidget(self.events_table)

        if show_create_button:
            self.create_event_button = QPushButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
            self.create_event_button.clicked.connect(lambda: self.create_event(self.title_input, self.description_input,
                                                                             self.date_input, self.start_time_input, self.end_time_input))
            self.layout.addWidget(self.create_event_button)

        self.setLayout(self.layout)


if __name__ == "__main__":
    user_info_example = {
        "id": 1,
        "first_name": "–ê—Ä–∏–Ω–∞",
        "last_name": "–ü–µ—Ç—Ä—É—Ö–∏–Ω–∞",
        "middle_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
        "role": "admin",
    }

    app = QApplication(sys.argv)
    window = MainWindow(user_info_example)
    window.show()
    sys.exit(app.exec())